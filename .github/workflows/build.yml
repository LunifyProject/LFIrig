name: Compilation

on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**/README.md'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**/README.md'
  workflow_dispatch:
    inputs:
      run_release:
        description: 'Release the Artifacts'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      version_number:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

env:
  CCACHE_SETTINGS: |
    ccache --max-size=150M
    ccache --set-config=compression=true
  APT_SET_CONF: |
    echo "Acquire::Retries \"3\";"         | sudo tee -a /etc/apt/apt.conf.d/80-custom
    echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    echo "Acquire::ftp::Timeout \"120\";"  | sudo tee -a /etc/apt/apt.conf.d/80-custom

jobs:
  build-mac:
    name: ${{ matrix.toolchain.name }}
    runs-on: ${{ matrix.toolchain.os }}
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    strategy:
      matrix:
        toolchain:
          - name: "MacOS (x86_64-apple-darwin)"
            os: macos-13
          - name: "MacOS (arm64-apple-darwin)"
            os: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/cache@v4
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-${{ runner.os }}-build-${{ github.sha }}
        restore-keys: ccache-${{ runner.os }}-build-
    - name: install dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1 brew install ccache hwloc
    - uses: ./.github/actions/set-make-job-count
    - name: build
      run: |
        ${{env.CCACHE_SETTINGS}}
        mkdir build
        cd build
        cmake ..
        make -j${{env.MAKE_JOB_COUNT}}
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.toolchain.name }}
        path: |
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/lfirig
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/src/config.json

  build-windows:
    name: Win64 (x86_64-w64-mingw32)
    runs-on: windows-latest
    env:
      CCACHE_TEMPDIR: C:\Users\runneradmin\.ccache-temp
      CCACHE_DIR: C:\Users\runneradmin\.ccache
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\.ccache
        key: ccache-${{ runner.os }}-build-${{ github.sha }}
        restore-keys: ccache-${{ runner.os }}-build-
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache git mingw-w64-x86_64-pkg-config mingw-w64-x86_64-hwloc
    - uses: ./.github/actions/set-make-job-count
    - name: Get folder location
      run: |
        ls /d/a/LFIrig/LFIrig/deps/gcc/x64
    - name: build
      run: |
        ${{env.CCACHE_SETTINGS}}
        mkdir build
        cd build
        cmake .. -G "Unix Makefiles" -DXMRIG_DEPS=/d/a/LFIrig/LFIrig/deps/gcc/x64
        make -j${{env.MAKE_JOB_COUNT}}
    - uses: actions/upload-artifact@v4
      with:
        name: Win64 (x86_64-w64-mingw32)
        path: |
          D:\a\LFIrig\LFIrig\build\lfirig.exe
          D:\a\LFIrig\LFIrig\build\WinRing0x64.sys
          D:\a\LFIrig\LFIrig\src\config.json

  build-linux:
    name: 'Linux x86_64 (x86_64-linux-gnu)'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-libwallet-${{ github.sha }}
      - name: Set apt conf
        run: ${{env.APT_SET_CONF}}
      - name: Update apt
        run: sudo apt update
      - name: Install dependencies
        run: sudo apt-get -y install git build-essential ccache cmake automake libtool autoconf libhwloc-dev libuv1-dev
      - uses: ./.github/actions/set-make-job-count
      - name: build
        run: |
          ${{env.CCACHE_SETTINGS}}
          mkdir build
          cd build
          cmake ..
          make -j${{env.MAKE_JOB_COUNT}}
      - uses: actions/upload-artifact@v4
        with:
          name: Linux x86_64 (x86_64-linux-gnu)
          path: |
            /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/lfirig
            /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/src/config.json

  download:
    name: Release Artifacts
    needs: ['build-mac', 'build-windows', 'build-linux']
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_release == 'true' }}
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release
        merge-multiple: false
    - name: Create tar.gz archive for 'Win64 (x86_64-w64-mingw32)'
      run: |
        tar -czf 'release/LFIrig-${{ github.event.inputs.version_number }}-gcc-win64.tar.gz' -C 'release/Win64 (x86_64-w64-mingw32)/build' lfirig.exe WinRing0x64.sys -C '../src' config.json
    - name: Create tar.gz archive for 'Linux x86_64 (x86_64-linux-gnu)'
      run: |
        tar -czf 'release/LFIrig-${{ github.event.inputs.version_number }}-linux64.tar.gz' -C 'release/Linux x86_64 (x86_64-linux-gnu)/build' lfirig -C '../src' config.json
    - name: Create tar.gz archive for 'MacOS (x86_64-apple-darwin)'
      run: |
        tar -czf 'release/LFIrig-${{ github.event.inputs.version_number }}-macos-x64.tar.gz' -C 'release/MacOS (x86_64-apple-darwin)/build' lfirig -C '../src' config.json
    - name: Create tar.gz archive for 'MacOS (arm64-apple-darwin)'
      run: |
        tar -czf 'release/LFIrig-${{ github.event.inputs.version_number }}-macos-arm64.tar.gz' -C 'release/MacOS (arm64-apple-darwin)/build' lfirig -C '../src' config.json
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: LFIrig ${{ github.event.inputs.version_number }}
        tag_name: ${{ github.event.inputs.version_number }}
        draft: true
        prerelease: false
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}